---

name: Порядок вычисления
theory: |

  Попробуем сделать Racket программу из выражения _5 - 3 + 1_. С точки зрения арифметики, порядок вычислений в нем строго опредлен. Сначала вычисляется _5 - 3_, затем к получившемуся результату прибавляется единица.

  Начнем с того что вычисляется первым: _5 - 3_ превращается в _(- 5  3)_. Затем сложим получившийся результат с единицей: _(+ (- 5 3) 1)_. Так как сложение это коммутативная операция, тоже самое можно записать и в другом порядке: _(+ 1 (- 5 3))_. Неизменным остается то, что в начале каждого списка находится операция.

  Заметьте, выражения вычисляемые первыми, находятся в глубине дерева. Такое поведение идентично большинству обычных языков. Сначала вычисляются аргументы функций, затем вызывается сама функция.

  Попробуем другой вариант: _5 - (3 + 1)_. В этом выражении скобки устанавливают другой приоритет. Это значит что сначала вычислится сумма единицы и тройки. Так и запишем _(+ 3 1)_ (или так _(+ 1 3)_). Теперь, возьмем пятерку и вычтем из нее получившийся результат: _(- 5 (+ 1 3))_.

  На этом моменте проявляется еще одна отличительная особенность Lisp-языков. Древовидная структура программы сама определяет приоритет. Отпадает необходимость использовать дополнительные скобки.

  Еще один пример: _5 + 7 + (8 - 3) - (8 * 5)_. Действуем уже по привычной схеме:

  * _(* 5 8)_
  * _(- 8 3)_
  * _(+ 5 7 (- 8 3))_
  * _(- (+ 5 7 (- 8 3) (* 5 8))_

instructions: |

  Выведите на экран значение выражения: _100 - 34 - 22 - (5 + 3 - 10)_

definitions: []
tips: []
