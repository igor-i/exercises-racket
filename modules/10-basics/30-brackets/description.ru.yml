---

name: Скобки
theory: |

  Скобки насктолько пугают новичков, что весь интернет завален вопросами "почему в лиспе так много скобок?". Они появляются не просто так, при обычном способе редактирования текста, Lisp программы с трудом поддаются модификации. Забытая скобка может стать причиной долгой отладки. Посмотрите на этот код:

  ```scheme
  (define (GET/hash #:rconn [rconn (current-redis-connection)] key
                    #:map-key [fkey identity]
                    #:map-val [fval identity])
    (let loop ([lst (HGETALL #:rconn rconn key)] [h (hash)])
      (if (null? lst) h
          (loop (cddr lst) (hash-set h (fkey (car lst)) (fval (cadr lst)))))))
  ```

  В самом конце очень много скобок. Представьте если придется обернуть какую-то часть кода в новый список или удалить ненужный список. Эта проблематика похожа на сложности, возникающие в редакторивании HTML файлов, когда нужно удалить как открывающий так и закрывающий тег, либо наоборот добавить.

  Как видно, обычный способ работы в редакторе совсем не подходит для модификации Lisp-программ. Поэтому в этом мире приняты другие подходы, о которых начинающие Lisp-программисты узнают случайно.

  Секрет приятной работы с Lisp-кодом состоит в изменении точки зрения на этот код. В то время, как в обычных языках мы модифицируем текст, в Lisp мы оперируем деревом. Для удобной работы над ним нам понадобятся операции, которые помогают легко вставлять удалять ноды, объединять их и разъединять. А еще неплохо было бы никогда не терять одиночных скобок.

  Все это очень давно существует в специальном расширении, которое называется Paredit (иногда говорят структурное редактирование). Paredit для каждого редактора свой. Попробуйте загуглить: "<имя редактора> paredit lisp". Например для продуктов компании JetBrains разработано специальное расширение [Cursive](https://cursive-ide.com/). В документации этого расширения [наглядно показаны](https://cursive-ide.com/userguide/paredit.html) возможности Paredit. Обязательно посмотрите эти гифки, они помогут понять принципы управления Lisp кодом. У Paredit есть альтернатива [Parinfer](https://shaunlebron.github.io/parinfer/).

  При правильном подходе, спустя некоторое время, вы вдруг обнаружите что структурное редактирование эффективнее обычного. Скобки перестанут быть проблемой, а при возврате в обычные языки вы начнете испытывать неудобства.

  Другой важный аспект - правильное форматирование. Длинные операции принято разбивать так, что операнды оказываются друг по другом:

  ```scheme
  (+ 234
     88
     123423)
  ```

  Более сложный пример:

  ```scheme
  (- 100
     (+ 4 100)
     (- 1000
        50))
  ```

  Такая запись тоже требует привыкания, но после вы сможете с легкостью ориентироваться в этом коде.


instructions: |

  Выведите на экран значение выражения: _4 + 2 - 3 * 5 - 8 / 7_. Выполните форматирование кода, так чтобы он легче воспринимался (его можно разбить по разному).

definitions: []
tips: []
