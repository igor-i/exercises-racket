---

name: Определение идентификаторов
theory: |

  Racket не функциональный язык программирования. В нем есть настоящие переменные, которые можно изменять. Переменные создаются с помощью конструкции `define`:

  ```scheme
  (define id expr)
  ; id - идентификатор
  ; expr - выражение
  ```

  Например:

  ```scheme
  (define lang "racket")
  (display lang) ; => "racket"
  ```

  Переменные, состоящие из нескольких слов, соединяют с помощью дефиса. В Lisp языках повсеместно принят kebab-case.

  ```scheme
  (define dangerous-year 1984)
  (display dangerous-year) ; => "hexlet.io"
  ```

  Значением переменной может быть не только значение, но и любое выражение:

  ```scheme
  (define result (+ 7
                    (- 4 6)))
  ```

  Для изменения переменных используется конструкция `set!`:

  (set! lang "scheme")
  (display lang) ; => "scheme"

  В общем случае использовать `set!` не рекомендуется. Racket отлично поддерживает функциональную парадигму и всячески ее поощрает. В процессе мы познакомимся со всеми необходимыми элементами.

instructions: |

  Создайте переменную обозначающую "количество участников" (имя соорудите сами), присвойте ей значение 100 и распечатайте на экран.

tips: []
